{"path": "pythonstan/analysis/transform/three_address.py", "loc": 1145, "classes": ["ThreeAddress", "ConstCollector", "ThreeAddressTransformer"], "functions": ["resolve_single_Assign", "split_expr", "visit_BinOp", "visit_UnaryOp", "visit_BoolOp", "visit_IfExp", "visit_Lambda", "visit_NamedExpr", "visit_Tuple", "visit_List", "visit_Set", "visit_Dict", "trans_comp", "visit_ListComp", "visit_SetComp", "visit_GeneratorExp", "visit_DictComp", "visit_For", "visit_AsyncFor", "visit_While", "visit_If", "visit_With", "visit_AsyncWith", "visit_Raise", "visit_Try", "visit_Assert", "visit_stmt_list", "visit_Match", "visit_ClassDef", "visit_FunctionDef", "visit_AsyncFunctionDef", "visit_arguments", "visit_Import", "visit_ImportFrom", "visit_Expr", "visit_Global", "visit_Nonlocal", "visit_Pass", "visit_Break", "visit_Continue", "visit_Expression", "visit_Module", "visit_Interactive"], "enums": [], "visitors": ["ThreeAddressTransformer"], "data_structs": ["ConstCollector"], "entrypoints": ["ThreeAddress"], "depends_on": ["ast", "pythonstan.utils", "pythonstan.ir", "pythonstan.world", "pythonstan.analysis"], "notes": "Three-address code transformation; converts Python AST to intermediate representation with temporary variables"}
{"path": "pythonstan/ir/ir_statements.py", "loc": 1110, "classes": ["IRStatement", "IRAbstractStmt", "IRAstStmt", "Label", "IRCatchException", "Goto", "JumpIfFalse", "JumpIfTrue", "IRYield", "IRReturn", "IRRaise", "IRPass", "IRAwait", "IRDel", "IRImport", "IRCall", "IRAnno", "AbstractIRAssign", "IRAssign", "IRCopy", "IRStoreAttr", "IRLoadAttr", "IRStoreSubscr", "IRLoadSubscr", "IRPhi", "IRScope", "IRModule", "IRFunc", "IRClass"], "functions": ["get_stores", "get_loads", "get_dels", "get_nostores", "get_ast", "rename", "load_module"], "enums": [], "visitors": [], "data_structs": ["IRStatement", "IRModule", "IRFunc", "IRClass"], "entrypoints": [], "depends_on": ["abc", "ast", "pythonstan.utils.var_collector", "pythonstan.utils.ast_rename"], "notes": "IR node definitions; assignment, call, attr ops; exception support; function and class scope definitions"}
{"path": "pythonstan/analysis/ai/operation.py", "loc": 827, "classes": ["Operation", "BinOp", "UnaryOp", "Call", "Subscript", "Attribute", "Compare", "BoolOp", "IfExp", "ListOp", "TupleOp", "SetOp", "DictOp", "Lambda", "Comprehension", "Yield", "YieldFrom", "Await", "FormattedValue", "JoinedStr", "Starred", "NamedExpr", "Slice"], "functions": ["eval", "visit_Name", "visit_Constant", "visit_BinOp", "visit_UnaryOp", "visit_BoolOp", "visit_Compare", "visit_Call", "visit_IfExp", "visit_Attribute", "visit_Subscript", "visit_ListComp", "visit_SetComp", "visit_GeneratorExp", "visit_DictComp", "visit_List", "visit_Tuple", "visit_Set", "visit_Dict", "visit_Lambda", "visit_Yield", "visit_YieldFrom", "visit_Await", "visit_FormattedValue", "visit_JoinedStr", "visit_Starred", "visit_NamedExpr", "visit_Slice"], "enums": [], "visitors": [], "data_structs": ["Operation"], "entrypoints": [], "depends_on": ["abc", "ast", "typing", "pythonstan.analysis.ai.value", "pythonstan.analysis.ai.state"], "notes": "Abstract interpretation operations; evaluates AST nodes to abstract values; handles arithmetic, logical, and data structure operations"}
{"path": "pythonstan/analysis/ai/value.py", "loc": 803, "classes": ["Value", "TopValue", "BottomValue", "ConcreteValue", "AbstractValue", "IntValue", "FloatValue", "BoolValue", "StrValue", "BytesValue", "NoneValue", "ListValue", "TupleValue", "SetValue", "DictValue", "FunctionValue", "ClassValue", "ModuleValue", "ObjectValue", "UnknownValue"], "functions": ["meet", "join", "widen", "narrow", "less_equal", "equals", "to_string", "from_python", "to_python", "copy", "hash"], "enums": [], "visitors": [], "data_structs": ["Value"], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.ir"], "notes": "Abstract value system for static analysis; concrete and abstract value representations; lattice operations"}
{"path": "pythonstan/analysis/ai/state.py", "loc": 604, "classes": ["State", "Environment", "Store", "Heap", "Context"], "functions": ["bind", "lookup", "update", "remove", "copy", "merge", "widen", "narrow", "less_equal", "equals", "to_string"], "enums": [], "visitors": [], "data_structs": ["State", "Environment", "Store", "Heap"], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.ai.value", "pythonstan.ir"], "notes": "Program state representation for abstract interpretation; environment, store, and heap management"}
{"path": "pythonstan/analysis/transform/icfg/baseprocess.py", "loc": 524, "classes": ["BaseProcessor", "ICFGBaseProcessor"], "functions": ["process", "visit", "visit_default", "process_module", "process_function", "process_class", "process_call", "process_return"], "enums": [], "visitors": ["ICFGBaseProcessor"], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.ir", "pythonstan.graph.icfg"], "notes": "Base processing framework for ICFG construction; handles inter-procedural control flow"}
{"path": "pythonstan/analysis/ai/solver.py", "loc": 427, "classes": ["AbstractInterpreter", "FixpointSolver", "WorklistSolver", "ChaosticIterationSolver"], "functions": ["solve", "transfer", "meet", "widen", "narrow", "is_fixpoint", "iterate"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "queue", "pythonstan.analysis.ai.state", "pythonstan.analysis.ai.value", "pythonstan.analysis.ai.operation", "pythonstan.graph.cfg"], "notes": "Abstract interpretation solver algorithms; fixpoint computation for static analysis"}
{"path": "pythonstan/analysis/transform/icfg/preprocessor.py", "loc": 375, "classes": ["Preprocessor", "ICFGPreprocessor"], "functions": ["preprocess", "collect_functions", "collect_classes", "collect_calls", "build_call_graph"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir", "pythonstan.graph.call_graph"], "notes": "ICFG preprocessing; collects program structure for inter-procedural analysis"}
{"path": "pythonstan/utils/persistent_rb_tree.py", "loc": 364, "classes": ["RBTree", "RBNode", "Color"], "functions": ["insert", "delete", "find", "balance", "rotate_left", "rotate_right", "successor", "predecessor"], "enums": ["Color"], "visitors": [], "data_structs": ["RBTree", "RBNode"], "entrypoints": [], "depends_on": ["enum", "typing"], "notes": "Persistent red-black tree implementation; efficient immutable data structure"}
{"path": "pythonstan/analysis/transform/ir.py", "loc": 355, "classes": ["IR", "LabelGenerator", "IRTransformer"], "functions": ["transform", "gen", "reset", "visit_stmts", "get_imports", "get_stmts", "postprocess", "dedumplicate_nop", "process_stmts", "visit_FunctionDef", "visit_ClassDef", "visit_AsyncFunctionDef", "visit_Break", "visit_Continue", "visit_Return", "visit_Import", "visit_ImportFrom", "visit_While", "visit_If", "visit_Raise", "visit_Try", "visit_Assign", "visit_AnnAssign", "visit_Delete", "generic_visit"], "enums": [], "visitors": ["IRTransformer"], "data_structs": ["LabelGenerator"], "entrypoints": ["IR"], "depends_on": ["ast", "typing", "pythonstan.analysis", "pythonstan.world", "pythonstan.ir"], "notes": "IR transformation from AST; handles control flow, exceptions, function/class definitions"}
{"path": "pythonstan/analysis/transform/icfg/postprocessor.py", "loc": 308, "classes": ["Postprocessor", "ICFGPostprocessor"], "functions": ["postprocess", "optimize", "remove_unreachable", "merge_blocks", "simplify_edges"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph.icfg"], "notes": "ICFG post-processing; optimization and cleanup of inter-procedural control flow graph"}
{"path": "pythonstan/analysis/points_to/elements.py", "loc": 866, "classes": ["PointsToElement", "Variable", "FieldRef", "ArrayRef", "InstanceFieldRef", "StaticFieldRef", "Pointer", "Obj", "CSObj", "ContextSensitiveElement"], "functions": ["get_base", "get_field", "get_index", "get_type", "get_context", "equals", "hash_code", "to_string"], "enums": [], "visitors": [], "data_structs": ["PointsToElement", "Variable", "Pointer", "Obj"], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.analysis.points_to.context"], "notes": "Points-to analysis elements; variables, objects, field references; context-sensitive representations"}
{"path": "pythonstan/analysis/points_to/heap_model.py", "loc": 251, "classes": ["HeapModel", "AllocationSiteHeapModel", "TypeBasedHeapModel", "FieldSensitiveHeapModel"], "functions": ["get_obj", "new_obj", "get_field", "set_field", "get_array_element", "set_array_element"], "enums": [], "visitors": [], "data_structs": ["HeapModel"], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.analysis.points_to.elements"], "notes": "Heap abstraction models; allocation site and type-based object modeling"}
{"path": "pythonstan/world/namespace.py", "loc": 235, "classes": ["Namespace", "NamespaceManager"], "functions": ["build", "get_namespace", "get_module", "get_import", "resolve_import", "add_namespace", "add_module"], "enums": [], "visitors": [], "data_structs": ["Namespace"], "entrypoints": [], "depends_on": ["typing", "pathlib", "pythonstan.utils.common"], "notes": "Python namespace and module management; import resolution and module discovery"}
{"path": "pythonstan/analysis/points_to/plugins/basic_data_flow_plugin.py", "loc": 235, "classes": ["BasicDataFlowPlugin", "AssignHandler", "CallHandler", "ReturnHandler"], "functions": ["handle_assign", "handle_call", "handle_return", "transfer_node", "transfer_edge"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.points_to.plugins.plugin", "pythonstan.analysis.points_to.elements"], "notes": "Basic data flow plugin for points-to analysis; handles assignments, calls, and returns"}
{"path": "pythonstan/graph/cfg/cfg.py", "loc": 200, "classes": ["ControlFlowGraph"], "functions": ["preds_of", "succs_of", "in_edges_of", "out_edges_of", "in_degree_of", "out_degree_of", "get_entry", "get_exit", "add_node", "add_blk", "add_stmt", "add_edge", "add_exit", "find_var", "get_var_map", "get_var_num", "add_super_exit_blk", "delete_node", "delete_block", "delete_edge", "delete_invalid_blk", "get_nodes", "retrive_label", "add_label", "get_stmts"], "enums": [], "visitors": [], "data_structs": ["ControlFlowGraph"], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph", "pythonstan.graph.cfg.base_block", "pythonstan.graph.cfg.edges", "pythonstan.ir", "pythonstan.utils.var_collector"], "notes": "Control flow graph implementation; manages basic blocks, edges, and program flow"}
{"path": "pythonstan/analysis/dataflow/solver.py", "loc": 178, "classes": ["Solver", "WorklistSolver"], "functions": ["init", "init_forward", "init_backward", "solve", "solve_forward", "solve_backward"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "abc", "queue", "pythonstan.analysis.dataflow.analysis", "pythonstan.graph.cfg"], "notes": "Dataflow analysis solver; worklist algorithm for forward and backward analysis"}
{"path": "pythonstan/analysis/points_to/solver.py", "loc": 167, "classes": ["PointsToSolver", "AndersonSolver", "SteensgaardSolver"], "functions": ["solve", "process_constraint", "add_constraint", "propagate", "union_find"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.points_to.elements", "pythonstan.analysis.points_to.work_list"], "notes": "Points-to analysis solvers; Anderson and Steensgaard algorithms"}
{"path": "pythonstan/graph/cfg/edges.py", "loc": 162, "classes": ["CFGEdge", "NormalEdge", "IfEdge", "CallEdge", "ReturnEdge", "CallToReturnEdge", "WhileEdge", "WhileElseEdge", "WithEdge", "WithEndEdge", "ExceptionEdge", "ExceptionEndEdge", "FinallyEdge", "FinallyEndEdge"], "functions": ["set_src", "set_tgt", "get_src", "get_tgt", "get_name", "get_callee", "get_ret_vars", "get_call_site"], "enums": [], "visitors": [], "data_structs": ["CFGEdge"], "entrypoints": [], "depends_on": ["abc", "ast", "typing", "pythonstan.ir", "pythonstan.graph", "pythonstan.graph.cfg.base_block"], "notes": "CFG edge types; normal, conditional, call, return, exception, and finally edges"}
{"path": "pythonstan/analysis/transform/block_cfg.py", "loc": 131, "classes": ["BlockCFG", "BaseBlockHelper", "BlockCFGBuilder"], "functions": ["transform", "get_goto_stmts", "will_directly_jump", "will_return", "retrive_label", "split_stmts", "build_graph", "new_blk"], "enums": [], "visitors": [], "data_structs": ["BlockCFGBuilder"], "entrypoints": ["BlockCFG"], "depends_on": ["typing", "queue", "pythonstan.analysis", "pythonstan.graph.cfg", "pythonstan.world", "pythonstan.ir"], "notes": "Block-level CFG construction; splits IR statements into basic blocks"}
{"path": "pythonstan/graph/dominator_tree.py", "loc": 126, "classes": ["DominatorTree", "DominatorNode"], "functions": ["build", "get_idom", "get_dominators", "get_dominated", "is_dominated_by", "get_lca"], "enums": [], "visitors": [], "data_structs": ["DominatorTree", "DominatorNode"], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph"], "notes": "Dominator tree construction and queries; program analysis utility"}
{"path": "pythonstan/analysis/points_to/pointer_flow_graph.py", "loc": 121, "classes": ["PointerFlowGraph", "PFGNode", "PFGEdge"], "functions": ["add_node", "add_edge", "get_succs", "get_preds", "propagate"], "enums": [], "visitors": [], "data_structs": ["PointerFlowGraph", "PFGNode", "PFGEdge"], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.points_to.elements"], "notes": "Pointer flow graph for points-to analysis; represents data flow constraints"}
{"path": "pythonstan/analysis/points_to/solver_interface.py", "loc": 119, "classes": ["SolverInterface", "ConstraintSolver", "OnlineSolver", "OfflineSolver"], "functions": ["solve", "add_constraint", "query", "get_points_to_set"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.analysis.points_to.elements"], "notes": "Points-to solver interface; constraint-based and online/offline solving"}
{"path": "pythonstan/world/scope_manager.py", "loc": 119, "classes": ["ScopeManager", "ModuleGraph"], "functions": ["build", "add_module", "get_module", "add_class", "get_class", "add_function", "get_function", "set_ir", "get_ir", "get_subscopes", "get_module_graph", "set_module_graph"], "enums": [], "visitors": [], "data_structs": ["ModuleGraph"], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir", "pythonstan.utils.common", "pythonstan.graph"], "notes": "Scope and module management; tracks program structure and IR mappings"}
{"path": "pythonstan/world/pipeline.py", "loc": 117, "classes": ["Pipeline"], "functions": ["get_world", "build_scope_graph", "analyse_intra_procedure", "analyse_inter_procedure", "do_transform", "do_inter_procedure", "do_analysis", "run"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": ["Pipeline"], "depends_on": ["typing", "queue", "pythonstan.ir", "pythonstan.analysis", "pythonstan.world.namespace", "pythonstan.world.world", "pythonstan.world.config", "pythonstan.world.scope_manager", "pythonstan.world.analysis_manager"], "notes": "Analysis pipeline orchestration; manages analysis execution and dependencies"}
{"path": "pythonstan/graph/cfg/visualize.py", "loc": 112, "classes": ["CFGVisualizer"], "functions": ["visualize", "to_dot", "to_graphviz", "render"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph.cfg"], "notes": "CFG visualization utilities; DOT format and graphviz rendering"}
{"path": "pythonstan/analysis/transform/icfg/base.py", "loc": 110, "classes": ["ICFGBase", "ICFGTransform"], "functions": ["transform", "build_icfg", "connect_calls", "add_edges"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.ir", "pythonstan.graph.icfg"], "notes": "Base ICFG transformation framework; inter-procedural control flow construction"}
{"path": "pythonstan/world/analysis_manager.py", "loc": 110, "classes": ["AnalysisManager"], "functions": ["reset", "build", "add_analyzer", "gen_analyzer", "analysis", "do_analysis", "generator", "get_analyzer", "get_results"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "queue", "pythonstan.analysis", "pythonstan.analysis.transform", "pythonstan.analysis.dataflow", "pythonstan.ir"], "notes": "Analysis management; coordinates analysis execution and result tracking"}
{"path": "pythonstan/analysis/points_to/context.py", "loc": 106, "classes": ["Context", "CallStringContext", "ObjectSensitiveContext", "TypeSensitiveContext"], "functions": ["append", "get_length", "get_element", "equals", "hash_code", "to_string"], "enums": [], "visitors": [], "data_structs": ["Context"], "entrypoints": [], "depends_on": ["abc", "typing"], "notes": "Context abstraction for context-sensitive analysis; call string and object sensitivity"}
{"path": "pythonstan/graph/icfg/icfg.py", "loc": 98, "classes": ["ICFG", "ICFGNode", "ICFGEdge"], "functions": ["add_node", "add_edge", "get_entry", "get_exit", "get_call_sites", "get_callees"], "enums": [], "visitors": [], "data_structs": ["ICFG", "ICFGNode", "ICFGEdge"], "entrypoints": ["ICFG"], "depends_on": ["typing", "pythonstan.graph", "pythonstan.ir"], "notes": "Inter-procedural control flow graph; represents program structure across function boundaries"}
{"path": "pythonstan/analysis/transform/cfg.py", "loc": 96, "classes": ["CFG", "CFGTransformer"], "functions": ["transform", "trans", "new_blk", "_trans"], "enums": [], "visitors": [], "data_structs": ["CFGTransformer"], "entrypoints": ["CFG"], "depends_on": ["copy", "typing", "pythonstan.analysis", "pythonstan.graph.cfg", "pythonstan.world", "pythonstan.ir"], "notes": "CFG transformation from block CFG; creates statement-level control flow graph"}
{"path": "pythonstan/graph/cfg/base_block.py", "loc": 83, "classes": ["BaseBlock"], "functions": ["get_stmts", "get_idx", "get_name", "add", "add_front", "n_stmt", "get_stores", "get_loads", "get_dels", "gen_label"], "enums": [], "visitors": [], "data_structs": ["BaseBlock"], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir", "pythonstan.graph"], "notes": "Basic block implementation; contains IR statements and supports control flow analysis"}
{"path": "pythonstan/analysis/analysis.py", "loc": 82, "classes": ["AnalysisConfig", "Analysis", "AnalysisDriver"], "functions": ["get_analysis", "get_id", "valid_id", "analyze"], "enums": [], "visitors": [], "data_structs": ["AnalysisConfig"], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.ir"], "notes": "Analysis framework base classes; configuration and driver abstractions"}
{"path": "pythonstan/analysis/points_to/cs_manager.py", "loc": 82, "classes": ["CSManager", "ContextSensitiveManager"], "functions": ["get_context", "make_context", "get_var", "get_obj", "get_field"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.points_to.context", "pythonstan.analysis.points_to.elements"], "notes": "Context-sensitive analysis manager; handles context creation and element mapping"}
{"path": "pythonstan/analysis/scope/closure.py", "loc": 81, "classes": ["ClosureAnalysis", "ClosureCollector"], "functions": ["analyze", "collect_closures", "visit_FunctionDef", "visit_Lambda", "visit_Name"], "enums": [], "visitors": ["ClosureCollector"], "data_structs": [], "entrypoints": [], "depends_on": ["ast", "typing", "pythonstan.ir"], "notes": "Closure analysis; detects free variables and nested function scoping"}
{"path": "pythonstan/graph/graph.py", "loc": 80, "classes": ["Node", "Edge", "Graph"], "functions": ["get_idx", "get_name", "set_src", "set_tgt", "get_src", "get_tgt", "in_degree_of", "out_degree_of", "preds_of", "succs_of", "get_entry", "get_exit", "add_node", "add_edge", "delete_node", "delete_edge", "get_nodes"], "enums": [], "visitors": [], "data_structs": ["Node", "Edge", "Graph"], "entrypoints": [], "depends_on": ["abc", "typing"], "notes": "Graph abstraction base classes; node, edge, and graph interfaces"}
{"path": "pythonstan/utils/var_collector.py", "loc": 72, "classes": ["VarCollector"], "functions": ["reset", "find", "get_vars", "size", "visit_Name", "visit_alias", "visit_ClassDef", "visit_FunctionDef", "visit_AsyncFunctionDef", "visit_arg"], "enums": [], "visitors": ["VarCollector"], "data_structs": [], "entrypoints": [], "depends_on": ["ast", "typing"], "notes": "Variable collector for AST analysis; tracks variable usage in different contexts"}
{"path": "pythonstan/analysis/transform/icfg/icfg_pre_transform.py", "loc": 68, "classes": ["ICFGPreTransform"], "functions": ["transform", "preprocess"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.analysis.transform.icfg.base"], "notes": "ICFG pre-transformation; prepares program for inter-procedural analysis"}
{"path": "pythonstan/utils/temp_var_generator.py", "loc": 68, "classes": ["TempVarGenerator"], "functions": ["get_ctx_name", "reset", "gen", "__call__", "gen_idx", "get"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["copy", "ast", "typing"], "notes": "Temporary variable generation for program transformation; manages unique identifiers"}
{"path": "pythonstan/analysis/points_to/context_selector.py", "loc": 67, "classes": ["ContextSelector", "CallSiteSelector", "ObjectSensitiveSelector", "TypeSensitiveSelector"], "functions": ["select", "select_context", "select_heap_context"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.analysis.points_to.context"], "notes": "Context selection strategies for points-to analysis; call-site and object-sensitive selection"}
{"path": "pythonstan/utils/common.py", "loc": 63, "classes": ["Singleton"], "functions": ["__new__"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": [], "notes": "Common utilities; singleton pattern and shared functionality"}
{"path": "pythonstan/graph/call_graph/call_graph.py", "loc": 61, "classes": ["CallGraph", "CallGraphNode"], "functions": ["add_call", "get_callees", "get_callers", "has_call"], "enums": [], "visitors": [], "data_structs": ["CallGraph", "CallGraphNode"], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph", "pythonstan.ir"], "notes": "Call graph construction and queries; tracks function call relationships"}
{"path": "pythonstan/analysis/dataflow/analysis.py", "loc": 58, "classes": ["DataflowAnalysis"], "functions": ["new_boundary_fact", "new_init_fact", "meet", "transfer_node", "need_transfer_edge", "transfer_edge", "get_scope", "get_cfg", "set_input", "get_input"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing", "pythonstan.graph.cfg", "pythonstan.ir", "pythonstan.analysis"], "notes": "Dataflow analysis framework; abstract base for forward and backward analysis"}
{"path": "pythonstan/world/config.py", "loc": 57, "classes": ["Config"], "functions": ["from_dict", "from_file", "get_analysis_list"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "json", "pathlib"], "notes": "Configuration management; loads analysis settings from files or dictionaries"}
{"path": "pythonstan/analysis/points_to/cs_call_graph.py", "loc": 52, "classes": ["CSCallGraph", "CSCallGraphNode"], "functions": ["add_call", "get_callees", "get_callers", "get_contexts"], "enums": [], "visitors": [], "data_structs": ["CSCallGraph", "CSCallGraphNode"], "entrypoints": [], "depends_on": ["typing", "pythonstan.graph.call_graph", "pythonstan.analysis.points_to.context"], "notes": "Context-sensitive call graph; extends call graph with context information"}
{"path": "pythonstan/analysis/dataflow/reaching_definition.py", "loc": 51, "classes": ["ReachingDefinition", "ReachingDefinitionFact"], "functions": ["new_boundary_fact", "new_init_fact", "meet", "transfer_node"], "enums": [], "visitors": [], "data_structs": ["ReachingDefinitionFact"], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.dataflow.analysis", "pythonstan.ir"], "notes": "Reaching definitions analysis; tracks variable definitions reaching program points"}
{"path": "pythonstan/analysis/points_to/plugins/composite_plugin.py", "loc": 47, "classes": ["CompositePlugin"], "functions": ["add_plugin", "transfer_node", "transfer_edge"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.points_to.plugins.plugin"], "notes": "Composite plugin for points-to analysis; combines multiple analysis plugins"}
{"path": "pythonstan/graph/call_graph/call_edge.py", "loc": 47, "classes": ["CallEdge", "InvokeEdge", "ReturnEdge"], "functions": ["get_call_site", "get_callee", "get_caller"], "enums": [], "visitors": [], "data_structs": ["CallEdge"], "entrypoints": [], "depends_on": ["abc", "pythonstan.graph", "pythonstan.ir"], "notes": "Call graph edge types; invoke and return edges for function calls"}
{"path": "pythonstan/analysis/ai/__init__.py", "loc": 45, "classes": [], "functions": [], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": [], "notes": "Abstract interpretation module initialization"}
{"path": "pythonstan/analysis/defuse.py", "loc": 40, "classes": ["DefUseAnalysis", "DefUseFact"], "functions": ["new_boundary_fact", "new_init_fact", "meet", "transfer_node", "get_defs", "get_uses"], "enums": [], "visitors": [], "data_structs": ["DefUseFact"], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.dataflow.analysis", "pythonstan.ir"], "notes": "Definition-use analysis; tracks variable definitions and uses"}
{"path": "pythonstan/analysis/scope/analysis.py", "loc": 37, "classes": ["ScopeAnalysis"], "functions": ["analyze", "get_scope"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.analysis", "pythonstan.ir"], "notes": "Scope analysis base; analyzes variable scoping and visibility"}
{"path": "pythonstan/world/world.py", "loc": 37, "classes": ["World"], "functions": ["setup", "build", "set_entry_module", "get_entry_module"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.utils.common", "pythonstan.ir", "pythonstan.world.namespace", "pythonstan.world.config", "pythonstan.world.scope_manager", "pythonstan.world.class_hierarchy", "pythonstan.world.import_manager"], "notes": "Global world state; manages program analysis context and components"}
{"path": "pythonstan/analysis/points_to/plugins/plugin.py", "loc": 36, "classes": ["Plugin", "TransferPlugin"], "functions": ["transfer_node", "transfer_edge"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "typing"], "notes": "Plugin interface for points-to analysis; extensible transfer function framework"}
{"path": "pythonstan/utils/ast_rename.py", "loc": 35, "classes": ["RenameTransformer"], "functions": ["visit_Name", "visit_FunctionDef", "visit_ClassDef", "visit_AsyncFunctionDef"], "enums": [], "visitors": ["RenameTransformer"], "data_structs": [], "entrypoints": [], "depends_on": ["ast"], "notes": "AST renaming utilities; transforms variable and function names"}
{"path": "pythonstan/world/class_hierarchy.py", "loc": 35, "classes": ["ClassHierarchy", "ClassNode"], "functions": ["add_class", "get_superclasses", "get_subclasses", "is_subclass"], "enums": [], "visitors": [], "data_structs": ["ClassNode"], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir"], "notes": "Class hierarchy management; tracks inheritance relationships"}
{"path": "pythonstan/analysis/dataflow/driver.py", "loc": 35, "classes": ["DataflowAnalysisDriver"], "functions": ["analyze"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir", "pythonstan.analysis", "pythonstan.analysis.dataflow.analysis", "pythonstan.analysis.dataflow.solver"], "notes": "Dataflow analysis driver; orchestrates dataflow analysis execution"}
{"path": "pythonstan/analysis/points_to/work_list.py", "loc": 32, "classes": ["WorkList", "FIFOWorkList", "LIFOWorkList"], "functions": ["add", "remove", "is_empty", "size"], "enums": [], "visitors": [], "data_structs": ["WorkList"], "entrypoints": [], "depends_on": ["abc", "typing", "queue"], "notes": "Work list data structures for points-to analysis; FIFO and LIFO implementations"}
{"path": "pythonstan/analysis/dataflow/liveness.py", "loc": 30, "classes": ["LivenessAnalysis", "LivenessFact"], "functions": ["new_boundary_fact", "new_init_fact", "meet", "transfer_node"], "enums": [], "visitors": [], "data_structs": ["LivenessFact"], "entrypoints": [], "depends_on": ["typing", "pythonstan.analysis.dataflow.analysis", "pythonstan.ir"], "notes": "Liveness analysis; tracks live variables at program points"}
{"path": "pythonstan/analysis/transform/transform.py", "loc": 27, "classes": ["Transform"], "functions": ["set_input", "get_input", "transform"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["copy", "typing", "abc", "pythonstan.ir", "pythonstan.analysis"], "notes": "Transform base class; framework for program transformations"}
{"path": "pythonstan/analysis/transform/driver.py", "loc": 26, "classes": ["TransformDriver"], "functions": ["analyze"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.analysis", "pythonstan.analysis.transform.transform"], "notes": "Transform driver; executes program transformations"}
{"path": "pythonstan/ir/ir_visitor.py", "loc": 21, "classes": ["IRVisitor"], "functions": ["visit", "visit_default"], "enums": [], "visitors": ["IRVisitor"], "data_structs": [], "entrypoints": [], "depends_on": ["abc", "pythonstan.ir.ir_statements"], "notes": "IR visitor pattern; base class for traversing IR statements"}
{"path": "pythonstan/graph/cfg/dump.py", "loc": 20, "classes": ["CFGDumper"], "functions": ["dump", "dump_dot"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.graph.cfg"], "notes": "CFG dumping utilities; exports control flow graphs"}
{"path": "pythonstan/analysis/points_to/analysis.py", "loc": 19, "classes": ["PointsToAnalysis"], "functions": ["analyze"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.analysis"], "notes": "Points-to analysis main class; entry point for pointer analysis"}
{"path": "pythonstan/world/import_manager.py", "loc": 16, "classes": ["ImportManager"], "functions": ["build", "set_import", "get_import"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["typing", "pythonstan.ir"], "notes": "Import tracking and resolution; manages module dependencies"}
{"path": "pythonstan/analysis/points_to/driver.py", "loc": 11, "classes": ["PointsToDriver"], "functions": ["analyze"], "enums": [], "visitors": [], "data_structs": [], "entrypoints": [], "depends_on": ["pythonstan.analysis"], "notes": "Points-to analysis driver; orchestrates pointer analysis execution"}
